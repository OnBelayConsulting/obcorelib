# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - '**'
      - !main
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
jobs:
  test:

    services:
      postgres:
        image: postgres:latest

        env:
          POSTGRES_DB: coretest
          POSTGRES_USER: coretest
          POSTGRES_PASSWORD: coretest
        ports:
          - 5432:5432

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    

    runs-on: ubuntu-latest
    container: gradle:jdk11-focal

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: install other utilities
      run: |
        apt-get update
        apt-get install --yes postgresql-client

    - name: query database
      run: |
        psql -h postgres -d coretest -U coretest -c 'SELECT 1;'
      env:
        PGPASSWORD: coretest


    - name: set up gradlew for execution
      run: |
        chmod +x gradlew

    - name: Copy overlays to support testing
      uses: gradle/gradle-build-action@v2
      with:
        arguments: copyAllOverlays

    - name: run gradle deployNew
      run: |
        ./gradlew deploy:database:deployNew
      env:
        GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
        GPR_USER: ${{ secrets.GPR_USER }}

    - name: run gradle unitTests
      run: |
        ./gradlew construct:obcorelib:runUnitTests
      env:
        GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
        GPR_USER: ${{ secrets.GPR_USER }}

