plugins {
	id 'java'
	id 'org.liquibase.gradle' version '2.0.3'
}

repositories {
	mavenCentral()
}

dependencies {
	liquibaseRuntime "org.liquibase:liquibase-core:4.3.5"
	liquibaseRuntime 'org.postgresql:postgresql:42.2.8'
	// Pull in other liquibase projects that deploy needs
	liquibaseRuntime project(path: ':construct:database', configuration: 'database')
}


task deployNew(dependsOn: ':construct:database:jar') {
	doLast{ liquibase.runList = "applySnapshotActivity, applyChangesActivity" }
}
deployNew.finalizedBy update

task deployChanges(dependsOn: ':construct:database:jar') {
	doLast { liquibase.runList = "applyChangesActivity" }
}
deployChanges.finalizedBy update


liquibase {

	Properties jdbcProps = new Properties() 
	jdbcProps.load(new FileInputStream("${projectDir}/jdbc.properties"))

	// Add the dynamically replaced properties found in the gradle.properties to the system properties.
	// This makes the properties available to Liquibase at runtime. For example: In the change log
	// files "${tblspace_data}" would get replaced by the value for tblspace_data found in
	// gradle.properties (e.g. "RISK_DATA").
	System.getProperties().put("tblspace_data", tblspace_data)
	System.getProperties().put("tblspace_data_idx",  tblspace_data_idx)
	System.getProperties().put("tblspace_work",  tblspace_work)
	System.getProperties().put("tblspace_work_idx",  tblspace_work_idx)

	activities {

		noChangeLogActivity {
			url jdbcProps.get("jdbc.url")
			username jdbcProps.get("jdbc.username")
			password jdbcProps.get("jdbc.password")
		}

		applySnapshotActivity {
			changeLogFile '/db/SnapshotLog.xml'
			url jdbcProps.get("jdbc.url")
			username jdbcProps.get("jdbc.username")
			password jdbcProps.get("jdbc.password")
		}

		applyChangesActivity {
			changeLogFile '/db/ChangesLog.xml'
			url jdbcProps.get("jdbc.url")
			username jdbcProps.get("jdbc.username")
			password jdbcProps.get("jdbc.password")
		}
	}

	try {
		runList = project.ext.runList
	} catch (Exception e) {
		runList = 'noChangeLogActivity'
	}
}